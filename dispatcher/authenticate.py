import logging
import logging.config 
import yaml
from envyaml import EnvYAML
import os
import sys
from gql import gql, Client
from gql.transport.aiohttp import AIOHTTPTransport

# EnvYAML necessary to parse environment vairables for the configuration file
config = EnvYAML("./docs/conf.yaml") 
# Logging
logging.config.dictConfig(config["logging"])
logger = logging.getLogger("dispatcher")

def authenticate_old(gql_address, user, password):
    """Generate a JWT for the GraphQL API to the core database (DEPRECATED)

        This function is using an old implementation of the GraphQL authentication system.

        Parameters
        ----------
        gql_address : str
            GraphQL API URL
            
        user : str
            Username of the application.
            
        password : str
            Password of the application.
            
        Returns
        -------
        JWT : str
            A JWT to access the GraphQL API.
    """
    
    transport = AIOHTTPTransport(url="http://{}/graphql".format(gql_address))
    client = Client(transport=transport, fetch_schema_from_transport=False)
    auth_query = gql(
        """
        mutation{{
            authenticate(input: {{
            userLogin: "{}",
            userPassword: "{}"
            }}){{
            jwtToken
            }}
        }}
    """.format(user, password)
    )
    result = client.execute(auth_query)
    return result["authenticate"]["jwtToken"]

def authenticate(gql_address, user, password, tags):
    """Generate an access token for the GraphQL API to the core database

        Parameters
        ----------
        gql_address : str
            GraphQL API URL
            
        user : str
            Username of the application.
            
        password : str
            Password of the application.
            
        Returns
        -------
        JWT : str
            An access token for the GraphQL API.
        
        Raises
        ------
        Exception
            If no accress token or refresh token is generated by this function an error is thrown.
    """
    
    logger.info(tags)
    
    transport = AIOHTTPTransport(url="http://{}/graphql".format(gql_address))
    client = Client(transport=transport, fetch_schema_from_transport=False)
    auth_refresh_query = gql(
        """
        mutation{{
            authRefreshToken(input: {{
            userLogin: "{}",
            userPassword: "{}"
            }}){{
            refreshToken {{
                id
                token
            }}
            }}
        }}
    """.format(user, password)
    )
    refresh_result = client.execute(auth_refresh_query)
    
    #logger.debug(refresh_result)
    
    if refresh_result['authRefreshToken']['refreshToken'] == None:
        logger.error("Refresh token error.", exc_info=True)
        raise Exception("No refresh token was generated.")
        sys.exit(1)
    
    auth_query = gql(
        """
        mutation{{
        authAccessToken(input: {{
            userRefreshToken: "{}"
            accessTokenExpiration: 400
            {}
        }}){{
            jwtToken
        }}
        }}
        """.format(refresh_result['authRefreshToken']['refreshToken']['token'], tags)
    )
    auth_result = client.execute(auth_query)
    
    #logger.debug(auth_result)
    
    if auth_result['authAccessToken']['jwtToken'] == None:
        logger.error("Auth access token error.", exc_info=True)
        raise Exception("No access token was generated.")
        sys.exit(1)
        
    return auth_result['authAccessToken']['jwtToken']

async def get_token_id(gql_address, jwt_env_key):
    """Extracts the token id from the active JWT

        Parameters
        ----------
        gql_address : str
            GraphQL API URL
            
        jwt_env_key : str
            Key used to retrieve the active JWT from the environment variables. 
            Format JWT_ENV_{NAME OF APPLICATION FROM CONFIG}.
                    
        Returns
        -------
        Token ID : str
            An access token for the GraphQL API.
        
        Raises
        ------
        Exception
            If no token id is retrieved by this function an error is thrown.
    """
    
    jwt = os.environ[jwt_env_key]
    transport = AIOHTTPTransport(url="http://{}/graphql".format(gql_address), headers={'Authorization': 'Bearer ' + jwt})
    client = Client(transport=transport, fetch_schema_from_transport=False)
    token_id_mutation = gql(
        """
        query {
            getRefreshTokenId
        }
        """
    )
    result = await client.execute_async(token_id_mutation)
    
    if result["getRefreshTokenId"] == None:
        logger.error("Refresh token ID error.", exc_info=True)
        raise Exception("No token ID was retrieved.")
        sys.exit(1)
    
    return result["getRefreshTokenId"]